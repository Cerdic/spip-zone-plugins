<?php// Auteur : JLuc////// - Parametrage du traitement =//		* specification de la table destinataire pour le formulaire//		* correspondance des champs entre formulaire et table//		sous la forme d'une suite de couples champform1|champtable// - Enregistrement des valeurs saisies dans la table utilisateur//// Notes techniques :// La gestion des "modification de reponses existantes" est une dupplication// de cette partie du traitement 'enregistrement'.// Ce serait bien de mutualiser le code et la config en sortant cette partie des traitements.// Securiteif (!defined("_ECRIRE_INC_VERSION")) return;function traiter_simple_dist($args, $retours){	include_spip('inc/formidable');    include_spip ("inc/formitable");	include_spip('base/abstract_sql');	$options = $args['options'];	$formulaire = $args['formulaire'];	$id_formulaire = intval($formulaire['id_formulaire']); // quasi inutile	$saisies = unserialize($formulaire['saisies']);	$saisies = saisies_lister_par_nom($saisies);    $table_destinataire = $options['table_destinataire'];   	$correspondance_champs_formulaire_table = $options['correspondance_champs_formulaire_table'];   	$correspondance_champs_formulaire_table = saisies_chaine2tableau($correspondance_champs_formulaire_table);	// La personne a-t-elle un compte ?	global $auteur_session;	$id_auteur = $auteur_session ? intval($auteur_session['id_auteur']) : 0;    $champs = array();    $insertions = array();    foreach($saisies as $nom => $saisie){        // On ne prend que les champs qui ont effectivement été envoyés par le formulaire        if (($valeur = _request($nom)) !== null){            $champs[] = $nom;            if (isset ($correspondance_champs_formulaire_table[$nom]))                $colname = $correspondance_champs_formulaire_table[$nom];            else {                $retours['message_erreur'] .= "\n<br/>Erreur : le champ du formulaire ".$nom."n'a pas de correspondance declaree dans la table utilisateur";                break;            };            // traitements des valeurs avant enregistrement : fonction de la table destinataire et du champ destination            if (function_exists($f = 'traitement_champ_'.$table_destinataire.'_'.$colname)                OR function_exists($f = 'traitement_champ_'.$colname)                OR function_exists($f = 'traitement_champ'))                $valeur = $f($valeur, $table_destinataire, $colname, $nom);            $insertions[$colname] = (is_array($valeur) ? serialize($valeur) : $valeur);        }    }    // Si la moderation est a posteriori ou que la personne a les autorisations nécessaire, on publie direct    if ($options['champ_statut']) {        if ($options['moderation'] == 'posteriori' or autoriser('instituer', $table_destinataire, 'unused', null, array('id_formulaire'=>$id_formulaire, 'nouveau_statut'=>'publie')))       		$statut='publie';       	else       		$statut = 'prop';        $insertions[$options['champ_statut']]=$statut;    }/* *   // Si on identifie    if ($options['auth_cookie'])  {        $nom_cookie = formitable_generer_nom_cookie($id_formulaire);       	if (isset($_COOKIE[$nom_cookie]))       	    $cookie = $_COOKIE[$nom_cookie];            $id_reponse_cookie = sql_getfetsel ($options['primary'], $table_destinataire, $auteur_session['auth_cookie']."='$cookie'");       	else {       		include_spip("inc/acces");       		$cookie = creer_uniqid();       	}        $insertions[$options['champ_cookie']] = $cookie;    };   */    $id_reponse_auteur_deja = 0;    if ($options['champ_id_auteur']) {        // La personne a-t-elle un compte ?       	global $auteur_session;       	$id_auteur = $auteur_session ? intval($auteur_session['id_auteur']) : 0;        $insertions[$options['champ_id_auteur']] = $id_auteur;        $id_reponse_auteur_deja = sql_getfetsel ($options['champ_primary'], $table_destinataire, $options['champ_id_auteur'].'='.$id_auteur);    }    // à confirmer à terme :    // les réponses sont soit multiples et non modifiables,    // soit uniques et modifiables,    // soit uniques et non modifiables    if ($id_reponse_auteur_deja and !$options['multiple']) {        $retours['message_erreur'] .= "\n<br/>"._T('Vous avez déjà répondu. Votre nouvelle réponse ne peut être prise en compte.');        return $retours;    }/*    if ($options['multiple'] or $options['modifiable']){  			include_spip("inc/cookie");  			// Expiration dans 30 jours  			spip_setcookie($nom_cookie, $_COOKIE[$nom_cookie] = $cookie, time() + 30 * 24 * 3600);	}*/    // S'il y a bien des choses à modifier    if ($champs) {        // On insere les nouvelles valeurs        $id = sql_insertq ($table_destinataire, $insertions);        if (!$id)            $retours['message_erreur'] .= "\n<br/>Erreur : l'insertion dans la table ($table_destinataire) ne se fait pas bien.".sql_error()."<pre class='reponse_formulaire_erreur'>".print_r($insertions,1)."</pre>";    };	return $retours;}function traiter_simple_update_dist($id_formulaire, $traitement, $saisies_anciennes, $saisies_nouvelles){	// à voir}?>