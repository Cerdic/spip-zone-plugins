README_maxigos.txt


maxigos est un modèle pour Spip qui permet l'implémentation des principales fonctionnalités de maxiGos, "un ensemble d'outils permettant d'insérer des parties, problèmes et diagrammes de go enregistrés au format sgf dans une page web."
http://jeudego.org/maxiGos/
Le contenu sgf peut être écrit en paramètre du modèle ou contenu dans un fichier au format sgf (Smart Game Format, https://en.wikipedia.org/wiki/Smart_Game_Format)

Le modèle a été testé sous Spip 3.1, mais il n'y a pas à priori de raison pour qu'il ne fonctionne pas également sous Spip 3.0, ou 2.1 et 2.0. Simplement, il faut tester. Des retours d'utilisateurs sont les bienvenus à ce propos. 

***Configuration.***
-* Les modèles sont à placer dans [votre_dossier_squelette]/modeles, par exemple: squelettes/modeles/maxigos.html et squelettes/modeles/autorise_sgf.html
-* Le répertoire maxigos du package est à charger en sous répertoire immédiat de votre dossier squelettes

**Autoriser les documents SGF**
Spip a "oublié" ;) d'autoriser les fichiers d'extension .sgf et les compresse zip. Il faut donc les autoriser directement dans la base de données, en ajoutant une ligne dans la table "spip_type_documents". Pour réaliser cela simplement, le package contient un modèle autorise_sgf.html qui ajoutera cette ligne dans la base si elle n'existe pas encore.
Utilisation simplissime: <code><autorise_sgf|></code>. Ce modèle n'est évidemment à utiliser qu'une seule fois, et vous pouvez supprimer le fichier autorise_sgf.html ensuite. Si vous l'utilisez plusieurs fois, cela n'a pas d'impact, l'autorisation n'est créée qu'une seule fois.

Et si vous préférez, via ligne de commande:
<code>INSERT INTO spip_type_documents (titre,extension,inclus,upload) VALUES("SGF","sgf","non","oui");</code> (les autres champs restent vides)
Voir http://www.spip.net/fr_article2002.html

***Règles du format sgf.***
Si vous voulez écrire du sgf directement dans le contenu, référez vous aux spécifications: http://www.red-bean.com/sgf/
La plupart du temps, vous préférerez sans doute utiliser des fichiers sgf créés automatiquement.


***Paramètres du modèle***
**Formatage**
- <code>langue=[langue]</code> où [langue] peut prendre les valeurs: fr (pour français, défaut), en (pour anglais), ja (pour japonais), zh (pour chinois), zh-tw (pour chinois taiwan)
- <code>style=[style]</code> où [style] peut prendre les valeurs: classic (par défaut), neo (pour neo-classic), tatami, minimal (pour minimalist), cameleon, [qui sont des valeurs multitypes] ou fm, kifu, tiger [qui sont des valeurs monotypes]
- <code>type=[type]</code> où [type] peut prendre les valeurs: basic (par défaut), comment, diagram, game, problem [qui sont des valeurs multistyles], tree, edit, lesson [qui sont des valeurs monostyles]

**Valeurs multitypes ou monotypes, et multistyles ou monostyles**
-* Les valeurs de style multitypes et les valeurs de types multistyles peuvent être associées, par exemple: <code>|style=neo|type=comment</code> ou <code>|style=cameleon|type=problem</code>
-* Par contre, 
-** les valeurs de style monotypes (fm, kifu, tiger) ont leur propre type (et donc, le paramètre <code>|type=[quelquechose]</code> ne servira à rien.
-** et les valeurs de types monostyles (edit, lesson) ont leur propre style (et donc, le paramètre <code>|style=[quelquechose]</code> ne servira à rien. 

Pour la signification des paramètres style et type, référez-vous aux exemples présentés sur cette page http://jeudego.org/maxiGos/_maxigos/_doc/_fr/download.php du site de maxiGos, sous l'intertitre "Téléchargement des lecteurs autonomes uniquement", et visualisez les exemples.


**Contenu**
Si les deux deux paramètres qui suivent (id_doc et contenu) sont présents, seul le paramètre id_doc sera pris en compte.
- <code>id_doc=XX</code> -- le contenu est dans un fichier d'id=XX, avec l'extension .sgf, téléchargé via Spip; peu importe que ce fichier soit lié ou non à l'objet (article, par exemple) où l'appel du modèle est inséré
- <code>contenu=un_contenu_sgf_ecrit_directement</code> -- le contenu SGF est écrit directement ou copié/collé dans l'objet Spip. {Attention, le contenu sgf écrit manuellement dans un article, ne supporte pas les "|" (pipe).} Ceci vaut uniquement pour le paramètre contenu. 

***Exemples d'utilisation***
Dans un article, vu que l'utilisation dans un squelette paraît ici peu pertinente.

<code><maxigos|contenu=(;FF[4]GM[1]SZ[19]VW[aa:ii]FG[1]AW[ee]AB[de][fe][ed];B[ef]C[Correct !])></code> présentera un exemple de problème (prise d'une pierre), en style classic, type basic.

<code><maxigos|style=tatami|type=tree|langue=zh|id_doc=XX></code> affichera un lecteur de style tatami, de type tree, en chinois, avec la partie ou le problème contenu dans un fichier .sgf d'id=XX.

L'appel du modèle peut se faire également sans paramètres de cette manière: <code><maxigos|></code> (sans oublier le | (pipe)). L'appel produit alors un éditeur basique de style classic et de type basic. Si on ajoute des paramètres de style, de type et/ou de langue, sans paramètres de fichier ni de contenu, l'appel produit alors également un éditeur basique, mais de style [style], de type [type] et/ou de langue [langue]

***Package***
Le package comprend:
- le modèle maxigos.html
- le modèle autorise_sgf.html
- un mode d'emploi README_maxigos.txt
- le répertoire maxigos contenant une version de maxiGos v6.64 (lecteurs autonomes seulement + editeur + fichiers de langue)

***Evolution***
V 1.3:
- Remplacement du paramètre fichier (nom du fichier sgf) par id_doc (id du fichier sgf). Ca simplifie l'écriture.
- Recherche du fichier via une boucle documents (ça permet de supprimer la constante CHEMIN_REPERTOIRE_SPIP).
- modèle autorise_sgf.html qui crée l'extension sfg dans spip_types_documents.
V 1.2:
- Protection des variables php par préfixe unique (maxigos_).
- Mise en minuscules automatique des noms de fichiers pour correspondre aux uploads spipiens.
- Ajout des styles cameleon (multitypes) fm, kifu, tiger (monotypes) et du type lesson (monostyle).

