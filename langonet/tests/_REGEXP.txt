**********************************************
****  Regexp et cas de tests de LangOnet  ****
**********************************************

1- Liste des fichiers concernés
-------------------------------

L'utilisation des items de langue est autorisé dans les fichiers :

	- XML  : fichiers .xml comme paquet.xml, plugin.xml...
	- YAML : fichiers .yaml comme ceux utilisés pour les saisies.
	- PHP  : fichiers .php sauf ceux inclus dans les dossiers lang/ req/ et charsets/.
	- HTML : fichiers .html correspondant aux squelettes SPIP.


2- Cas d'utilisation des items de langue et regexp
--------------------------------------------------

2.1 - Pour les fichiers XML

Le problème est la détection des items de langue de SPIP c'est-à-dire ceux qui ne sont pas préfixés du nom
du module. Pour être capable de les repérer au maximum, on distingue le paquet.xml, le plugin.xml - pour lequel
c'est possible - et les autres fichiers XML.

Pour le paquet.xml:
	- note		: les items sont uniquement contenus dans un attribut "titre"
	- cas X1	: l'item est la valeur d'un attribut de nom "titre" sous la forme "module:raccourci_item"
				  où module peut-être vide
	- exemples	:
		<onglet nom="id_onglet" titre="langonet:bouton_generer" parent="langonet" action="generer" />
		<onglet nom="id_onglet" titre="voir_en_ligne" parent="langonet" action="voir" />
	- regexp	: ,titre=['\"](?:([a-z0-9_-]+):)?([a-z0-9_]+)['\"],is

Pour le plugin.xml:
	- note		: les items sont uniquement contenus dans une balise "<titre>"
	- cas X2	: l'item est le contenu d'une balise de nom "titre" sous la forme "module:raccourci_item"
				  où module peut-être vide
	- exemples	:
		<onglet nom="id_onglet" titre="langonet:bouton_generer" parent="langonet" action="generer" />
		<onglet nom="id_onglet" titre="voir_en_ligne" parent="langonet" action="voir" />
	- regexp	: ,<titre>\s*(?:([a-z0-9_-]+):)?([a-z0-9_]+)\s*</titre>,is

Pour les autres fichiers XML:
	- note		: on ne peut pas chercher les items sans module car certains pourraient être des faux positifs
	- cas X3	: l'item est le contenu d'une balise quelconque sous la forme "module:raccourci_item"
				  où module est forcément non vide
	- cas X4	: l'item est la valeur d'un attribut quelconque sous la forme "module:raccourci_item"
				  où module est forcément non vide
	- exemples	:
		<nom>langonet:nom_plugin</nom>
		<fonction nom="langonet" description="paquet-langonet:langonet_description" action="activer" />
	- regexp	: une regexp pour chaque cas respectif
		,<\w+>\s*(?:([a-z0-9_-]+):)([a-z0-9_]+)\s*</\w+>,is
		,\w+=['\"](?:([a-z0-9_-]+):)([a-z0-9_]+)['\"],is


2.2 - Pour les fichiers YAML

Un seul cas d'utilisation est envisagé dans ces fichiers et correspond à l'utilisation standard dans les squelettes.
Les utilisations avec ou sans module sont détectées.

	- cas  Y1 : l'item est la chaine entre quotes associé à un label yaml sous la forme <:module:raccourci_item>
			   où module peut-être vide
	- exemples	:
		left: '<:langonet:item_left:>'
		right: '<:item_right:>'
	- regexp	: ,<:(?:([a-z0-9_-]+):)?([a-z0-9_]+):>,s


2.3 - Pour les fichiers HTML

	- cas H1	: l'item est utilisé au travers de l'écriture "classique" pour les squelettes, à savoir,
				  <:module:raccourci_item{param1=valeur1, param2=valeur2}|filtre|filtre2:>
				  où module peut-être vide et où les paramètres et filtres sont optionnels
	- exemples	:
		<:module:avec_module_1:>
		<:sans_module_2:>
		<:module:avec_module_3|trim|ucfirst:>
		<:sans_module_4|trim|ucfirst:>
		<:module:avec_module_5|trim{/}|ucfirst:>
		<:sans_module_6|trim{/}|ucfirst:>
		<:module:avec_module_7|trim|ucfirst:>
		<:sans_module_8|trim|ucfirst:>
		<:module:avec_module_9|trim{#GET{char}}|ucfirst:>
		<:sans_module_10|trim{#GET{char}}|ucfirst:>
		<:module:avec_module_11{param=valeur}}:>
		<:sans_module_12{param=valeur}}:>
		<:module:avec_module_13{param=#GET{char}}:>
		<:sans_module_14{param=#GET{char}}:>
		<:module:avec_module_15{param=#GET{char}}|trim{/}:>
		<:sans_module_16{param=#GET{char}}|trim{/}:>
		<:module:avec_module_17{param=#GET{char, valeur}}|trim{/, #ENV{position}}:>
		<:sans_module_18{param=#GET{char, valeur}}|trim{/, #ENV{position}}:>
	- regexp	: %<:(?:([a-z0-9_-]+):)?((?:[^:<>|{]+(?:<[^>]*>)?)*)([^:>]*):>%s

	- cas H2	: l'item est utilisé au travers de l'appel au filtre |singulier_ou_pluriel, à savoir,
				  |singulier_ou_pluriel{module:raccourci_item_1, module:raccourci_item_n, parametre_compteur}
				  où module peut-être vide
	- exemples	:
		[(#ENV{total}|singulier_ou_pluriel{langonet:message_ok_fonction_l_1, langonet:message_ok_fonction_l_n,nberr})]
		[(#ENV{total}|singulier_ou_pluriel{message_ok_fonction_l_1, langonet:message_ok_fonction_l_n,nberr})]
		[(#ENV{total}|singulier_ou_pluriel{langonet:message_ok_fonction_l_1, message_ok_fonction_l_n,nberr})]
		[(#ENV{total}|singulier_ou_pluriel{message_ok_fonction_l_1, message_ok_fonction_l_n,nberr})]
	- regexp	: il faut une regexp pour chaque argument pouvant être un item (arg1, arg2)
		%\|singulier_ou_pluriel{(?:[\s]*(?:([a-z0-9_-]+):)?([a-z0-9_]+))[^}]*}%s
		%\|singulier_ou_pluriel{[^,]*,(?:[\s]*(?:([a-z0-9_-]+):)?([a-z0-9_]+))[^}]*}%s

	- cas H3	: l'item est utilisé au travers de l'appel au filtre |_T ce qui nécessite l'utilisation de la
				  balise #VAL, à savoir,
				  #VAL{module:raccourci_item}|_T
				  où module peut-être vide
				  Mais parfois il peut y avoir une complexité additionnelle car le #VAL ne contient qu'une partie
				  de l'item de langue,
				  #VAL{module:debut_raccourci_item}|filtre_1{suite_item1}|filtre_2{suite_item2}|filtre_n|_T
				  où suite_item1,2, n peut-être une expression SPIP quelconque
	- exemples	:
		[(#VAL{langonet:label_article_texte}|_T)]
		[(#VAL{langonet:label_article_}|concat{#ELEMENT}|concat{#ENV{numero, defaut}}|_T)]
		[(#VAL{langonet:label_article_}|concat{#ELEMENT}|concat{#ENV{numero, defaut}}|_T)]
		[(#VAL{label_article_}|concat{#ELEMENT}|filtre_perso{#ENV{numero, defaut}}|trim|_T)]
	- regexp	: %#[A-Z_0-9]+{(?:([a-z0-9_-]+):)?([a-z0-9_]+)}((?:\|\w+{[^.]*})*)\|_T%s


2.4 - Pour les fichiers PHP


