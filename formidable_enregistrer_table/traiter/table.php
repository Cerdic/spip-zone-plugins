<?php// Débroussailleur : JLuc//// OK : // - Paramétrage du traitement =//		* spécification de la table destinataire pour le formulaire//		* correspondance des champs entre formulaire et table//		sous la forme d'une suite de couples champform1|champtable// - Enregistrement dans la table//// Approximatif ou foireux :// - Toute la mécanique de gestion des "modification de réponses existantes"//	est dupliquée depuis le traitement "enregistrement"// 	Notamment, il utilise les valeurs de cette configuration qui doit donc être activée//	Il faudrait soit retirer tout ça et faire au plus simple//	soit mutualiser le code ET la config ET l'interface de config !// - La fonction traiter_table_update_dist n'a pas encore été touchée, // 	elle doit être adaptée pour ce nouveau traitement//// Sécuritéif (!defined("_ECRIRE_INC_VERSION")) return;function traiter_table_dist($args, $retours){		include_spip('inc/formidable');	include_spip('base/abstract_sql');	$options = $args['options'];		$table_destinataire = $options['table_destinataire'];		$correspondance_champs_formulaire_table = $options['correspondance_champs_formulaire_table'];	$correspondance_champs_formulaire_table = saisies_chaine2tableau($correspondance_champs_formulaire_table);		$formulaire = $args['formulaire'];	$id_formulaire = intval($formulaire['id_formulaire']);	$saisies = unserialize($formulaire['saisies']);	$saisies = saisies_lister_par_nom($saisies);	// La personne a-t-elle un compte ?	global $auteur_session;	$id_auteur = $auteur_session ? intval($auteur_session['id_auteur']) : 0;		// On cherche le cookie et sinon on le crée	$nom_cookie = formidable_generer_nom_cookie($id_formulaire);	if (isset($_COOKIE[$nom_cookie]))		$cookie = $_COOKIE[$nom_cookie];	else {		include_spip("inc/acces");		$cookie = creer_uniqid();	}		// On regarde si c'est une modif d'une réponse existante	$modif_reponse = 		$id_formulaires_reponse 			= intval(_request('deja_enregistre_'.$id_formulaire));		// Si la moderation est a posteriori ou que la personne est un boss, on publie direct	if ($options['moderation'] == 'posteriori' or autoriser('instituer', 'formulaires_reponse', $id_formulaires_reponse, null, array('id_formulaire'=>$id_formulaire, 'nouveau_statut'=>'publie')))		$statut='publie';	else		$statut = 'prop';		// Si ce n'est pas une modif d'une réponse existante, on crée d'abord la réponse	if (!$id_formulaires_reponse){		$id_formulaires_reponse = sql_insertq(			'spip_formulaires_reponses',			array(				'id_formulaire' => $id_formulaire,				'id_auteur' => $id_auteur,				'cookie' => $cookie,				'ip' => $GLOBALS['ip'],				'date' => 'NOW()',				'statut' => $statut			)		);		// Si on a pas le droit de répondre plusieurs fois ou que les réponses seront modifiables, il faut poser un cookie		if (!$options['multiple'] or $options['modifiable']){			include_spip("inc/cookie");			// Expiration dans 30 jours			spip_setcookie($nom_cookie, $_COOKIE[$nom_cookie] = $cookie, time() + 30 * 24 * 3600);		}	}		// Si l'id n'a pas été créé correctement alors erreur	if (!($id_formulaires_reponse > 0)){		$retours['message_erreur'] .= "\n<br/>"._T('formidable:traiter_enregistrement_erreur_base');	}	// Sinon on continue à mettre à jour	else {		$champs = array();		$insertions = array();		foreach($saisies as $nom => $saisie){			// On ne prend que les champs qui ont effectivement été envoyés par le formulaire			if (($valeur = _request($nom)) !== null){				$champs[] = $nom;				if (isset ($correspondance_champs_formulaire_table[$nom]))					$colname = $correspondance_champs_formulaire_table[$nom];				else {					$retours['message_erreur'] .= "\n<br/>Erreur : le champ du formulaire ".$nom."n'a pas de correspondance déclarée dans la table utilisateur";					break;				};				$inserts[$colname] = (is_array($valeur) ? serialize($valeur) : $valeur);			}		}		if ($modif_reponse) // On modifie l'enregistrement trouvé			$inserts['id_formulaires_reponse'] = $id_formulaires_reponse;			// S'il y a bien des choses à modifier		if ($champs) {//			if ($modif_reponse)//				sql_updateq ($table_destinataire, $inserts);//			else			// On insère les nouvelles valeurs			$id= sql_insertq ($table_destinataire, $inserts);			if (!$id)					$retours['message_erreur'] .= "\n<br/>Erreur : l'insertion dans la table utilisateur ne se fait pas bien.".sql_error();		};	}	return $retours;}function traiter_table_update_dist($id_formulaire, $traitement, $saisies_anciennes, $saisies_nouvelles){	include_spip('inc/saisies');	include_spip('base/abstract_sql');	$comparaison = saisies_comparer($saisies_anciennes, $saisies_nouvelles);		// Si des champs ont été supprimés, il faut supprimer les réponses à ces champs	if ($comparaison['supprimees']){		// On récupère les réponses du formulaire		$reponses = sql_allfetsel(			'id_formulaires_reponse',			'spip_formulaires_reponses',			'id_formulaire = '.$id_formulaire		);		$reponses = array_map('reset', $reponses);				// Tous les noms de champs à supprimer		$noms = array_keys($comparaison['supprimees']);				// On supprime		sql_delete(			'spip_formulaires_reponses_champs',			array(				sql_in('id_formulaires_reponse', $reponses),				sql_in('nom', $noms)			)		);	}}?>